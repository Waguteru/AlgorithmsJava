Задание 45.
import java.util.Scanner;

public class task45 {
    
   
    public static String toRoman(int year) {
      
        if (year < 1 || year >= 10000) {
            throw new IllegalArgumentException("Год должен быть от 1 до 9999.");
        }

        String[] romanNumerals = {
            "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"
        };
        int[] values = {
            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1
        };

        StringBuilder romanYear = new StringBuilder();

        for (int i = 0; i < values.length; i++) {
            while (year >= values[i]) {
                romanYear.append(romanNumerals[i]);
                year -= values[i];
            }
        }
        return romanYear.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); 

    
        System.out.print("Введите количество лет (1 < n < 10000): ");
        int year = scanner.nextInt(); 

        try {
            String romanYear = toRoman(year);
            System.out.println("Римская цифра: " + romanYear);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage()); 
        } finally {
            scanner.close(); 
        }
    }
}


Задание 46.
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class task46 {

    private static final Map<Character, Integer> romanMap = new HashMap<>();

    static {
      
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите количество лет в Римских числах: ");
        String romanNumeral = scanner.nextLine(); 

        int arabicYear = convertRomanToArabic(romanNumeral);

        if (arabicYear > 0 && arabicYear < 10000) {
            System.out.println("Арабское число: " + arabicYear);
        } else {
            System.out.println("Ошибка: количество лет должно быть в диапазоне 1 < n < 10000.");
        }

        scanner.close();
    }

    private static int convertRomanToArabic(String roman) {
        int total = 0; 
        int prevValue = 0; 

        for (int i = roman.length() - 1; i >= 0; i--) {
            char currentChar = roman.charAt(i);
            int currentValue = romanMap.get(currentChar); 

          
            if (currentValue < prevValue) {
                total -= currentValue;
            } else {
                total += currentValue; 
            }
            prevValue = currentValue; 
        }
        return total; 
    }
}

Задание 47.
import java.util.Random;
import java.util.Scanner;

public class task47 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите количество чисел для генерации (N):");
        int n = scanner.nextInt();
        int size = (int) Math.sqrt(n);

        // Если N не является идеальным квадратом, корректируем размер матрицы
        if (size * size < n) {
            size++;
        }

        int[][] array = generateRandomArray(size, n);
        System.out.println("Сгенерированный массив:");
        printArray(array);

        int[] snailArray = snail(array);
        System.out.println("Массив в формате змейки:");
        printSnailArray(snailArray);
    }

    private static int[][] generateRandomArray(int size, int n) {
        int[][] array = new int[size][size];
        Random random = new Random();
        int count = 0;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (count < n) {
                    array[i][j] = random.nextInt(100); // Случайные числа от 0 до 99
                    count++;
                } else {
                    array[i][j] = 0;
                }
            }
        }
        return array;
    }

   
    private static void printArray(int[][] array) {
        for (int[] row : array) {
            for (int element : row) {
                System.out.print(element + "\t");
            }
            System.out.println();
        }
    }

   
    private static int[] snail(int[][] array) {
        int size = array.length;
        int[] result = new int[size * size];
        int index = 0;

        for (int layer = 0; layer < (size + 1) / 2; layer++) {
            // Слева направо
            for (int i = layer; i < size - layer; i++) {
                result[index++] = array[layer][i];
            }
            // Сверху вниз
            for (int i = layer + 1; i < size - layer; i++) {
                result[index++] = array[i][size - layer - 1];
            }
            // Справа налево
            if (layer < size - layer - 1) {
                for (int i = size - layer - 2; i >= layer; i--) {
                    result[index++] = array[size - layer - 1][i];
                }
            }
            // Снизу вверх
            if (layer < size - layer - 1) {
                for (int i = size - layer - 2; i > layer; i--) {
                    result[index++] = array[i][layer];
                }
            }
        }
        return result;
    }


    private static void printSnailArray(int[] array) {
        for (int element : array) {
            System.out.print(element + " ");
        }
        System.out.println();
    }
}

Задание 48.
import java.util.*;

public class task48 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Запрос у пользователя количества элементов
        System.out.print("Введите количество элементов ряда u: ");
        int n = scanner.nextInt();

        if (n <= 0) {
            System.out.println("Количество элементов должно быть положительным числом.");
            return;
        }

        // Используем LinkedHashSet для сохранения порядка и исключения дубликатов
        Set<Integer> uSet = new LinkedHashSet<>();
        uSet.add(1); // начальное значение u(0)

        int x = 0; // начальное значение x
        while (uSet.size() < n) {
            int y = 2 * x + 1;
            int z = 3 * x + 1;

            uSet.add(y);
            uSet.add(z);

            x++;
        }

        // Выводим полученный ряд
        System.out.println("Ряд u без дубликатов:");
        for (int num : uSet) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}


Задание 49.

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class task49 {
    // Мемоизация для функции fusc
    private static Map<Long, Long> memo = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите n для вычисления fusc(n): ");
        long n = scanner.nextLong();

        long result = fusc(n);
        System.out.println("fusc(" + n + ") = " + result);
    }

    // Реализация функции fusc с мемоизацией
    public static long fusc(long n) {
        if (memo.containsKey(n)) {
            return memo.get(n);
        }

        long result;
        if (n == 0) {
            result = 0;
        } else if (n == 1) {
            result = 1;
        } else if (n % 2 == 0) {
            // n чётное
            result = fusc(n / 2);
        } else {
            // n нечётное
            long nDiv2 = n / 2;
            result = fusc(nDiv2) + fusc(nDiv2 + 1);
        }

        memo.put(n, result);
        return result;
    }
}
